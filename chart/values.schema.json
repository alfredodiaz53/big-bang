{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "http://bigbang.dev/bigbang.json",
  "type": "object",
  "default": {},
  "title": "Big Bang Root Schema",
  "required": [
    "domain",
    "offline",
    "registryCredentials",
    "openshift",
    "git",
    "sso",
    "flux",
    "networkPolicies",
    "imagePullPolicy",
    "istio",
    "istiooperator",
    "jaeger",
    "kiali",
    "clusterAuditor",
    "gatekeeper",
    "kyverno",
    "kyvernopolicies",
    "kyvernoreporter",
    "logging",
    "eckoperator",
    "fluentbit",
    "promtail",
    "loki",
    "neuvector",
    "tempo",
    "monitoring",
    "twistlock"
  ],
  "properties": {
    "domain": {
      "type": "string"
    },
    "offline": {
      "type": "boolean"
    },
    "registryCredentials": {
      "oneOf": [
        {
          "$ref": "#/$defs/registryCredential"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/registryCredential"
          },
          "minItems": 1
        }
      ]
    },
    "openshift": {
      "type": "boolean"
    },
    "git": {
      "type": "object",
      "properties": {
        "existingSecret": {
          "type": "string"
        },
        "credentials": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "caFile": {
              "type": "string"
            },
            "privateKey": {
              "type": "string"
            },
            "publicKey": {
              "type": "string"
            },
            "knownHosts": {
              "type": "string"
            }
          },
          "required": [],
          "anyOf": [
            {
              "required": [
                "username",
                "password"
              ]
            },
            {
              "required": [
                "privateKey",
                "publicKey",
                "knownHosts"
              ]
            }
          ],
          "additionalProperties": false
        }
      },
      "anyOf": [
        {
          "required": [
            "existingSecret"
          ]
        },
        {
          "required": [
            "credentials"
          ]
        }
      ],
      "additionalProperties": false
    },
    "sso": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "certificateAuthority": {
          "type": "object",
          "properties": {
            "cert": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "saml": {
          "type": "object",
          "properties": {
            "entityDescriptor": {
              "type": "string"
            },
            "service": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "oidc": {
          "type": "object",
          "properties": {
            "authorization": {
              "type": "string"
            },
            "endSession": {
              "type": "string"
            },
            "jwksUri": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "userinfo": {
              "type": "string"
            },
            "jwks": {
              "type": "string"
            },
            "claims": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "groups": {
                  "type": "string"
                }
              }
            }
          }
        },
        "additionalProperties": false
      }
    },
    "flux": {
      "$ref": "#/$defs/flux"
    },
    "networkPolicies": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "controlPlaneCidr": {
          "type": "string"
        },
        "nodeCidr": {
          "type": "string"
        },
        "vpcCidr": {
          "type": "string"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "imagePullPolicy": {
      "type": "string",
      "enum": [
        "None",
        "Always",
        "IfNotPresent"
      ]
    },
    "istio": {
      "title": "The istio Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "istiooperator": {
      "title": "The istiooperator Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "jaeger": {
      "title": "The jaeger Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "kiali": {
      "title": "The kiali Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "clusterAuditor": {
      "title": "The clusterAuditor Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "gatekeeper": {
      "title": "The gatekeeper Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "kyverno": {
      "title": "The istiooperator Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "kyvernopolicies": {
      "title": "The istiooperator Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "kyvernoreporter": {
      "title": "The kyvernoreporter Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "logging": {
      "title": "The logging Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "eckoperator": {
      "title": "The eckoperator Schema",
      "type": "object",
      "required": [
        "enabled",
        "git",
        "flux",
        "values"
      ],
      "properties": {
        "enabled": {
          "$ref": "#/$defs/enabled"
        },
        "git": {
          "$ref": "#/$defs/git"
        },
        "flux": {
          "ref": "#/$defs/flux"
        },
        "values": {
          "$ref": "#/$defs/values"
        }
      }
    },
    "fluentbit": {
      "title": "The fluentbit Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "promtail": {
      "title": "The promtail Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "loki": {
      "title": "The loki Schema",
      "required": [
        "strategy",
        "objectStorage"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ],
      "properties": {
        "strategy": {
          "type": "string",
          "default": "",
          "title": "The strategy Schema",
          "examples": [
            "monolith",
            "scalable"
          ]
        },
        "objectStorage": {
          "type": "object",
          "default": {},
          "title": "The objectStorage Schema",
          "required": [
            "endpoint",
            "region",
            "accessKey",
            "accessSecret",
            "bucketNames"
          ],
          "properties": {
            "endpoint": {
              "type": "string",
              "default": "",
              "title": "The endpoint Schema",
              "examples": [
                ""
              ]
            },
            "region": {
              "type": "string",
              "default": "",
              "title": "The region Schema",
              "examples": [
                ""
              ]
            },
            "accessKey": {
              "type": "string",
              "default": "",
              "title": "The accessKey Schema",
              "examples": [
                ""
              ]
            },
            "accessSecret": {
              "type": "string",
              "default": "",
              "title": "The accessSecret Schema",
              "examples": [
                ""
              ]
            },
            "bucketNames": {
              "type": "object",
              "default": {},
              "title": "The bucketNames Schema",
              "required": [],
              "properties": {},
              "examples": [
                {}
              ]
            }
          }
        }
      }
    },
    "neuvector": {
      "title": "The neuvector Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "tempo": {
      "title": "The tempo Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "monitoring": {
      "title": "The monitoring Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "twistlock": {
      "title": "The twistlock Schema",
      "allOf": [
        {
          "$ref": "#/$defs/basePackage"
        }
      ]
    },
    "addons": {
      "type": "object",
      "properties": {
        "argocd": {
          "title": "The argocd Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "authservice": {
          "title": "The authservice Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "minioOperator": {
          "title": "The minioOperator Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "minio": {
          "title": "The minio Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "gitlab": {
          "title": "The gitlab Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "gitlabRunner": {
          "title": "The gitlabRunner Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "nexusRepositoryManager": {
          "title": "The nexusRepositoryManager Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "sonarqube": {
          "title": "The sonarqube Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "haproxy": {
          "title": "The haproxy Schema",
          "type": "object",
          "required": [
            "git",
            "flux",
            "values"
          ],
          "properties": {
            "enabled": {
              "$ref": "#/$defs/enabled"
            },
            "git": {
              "$ref": "#/$defs/git"
            },
            "flux": {
              "ref": "#/$defs/flux"
            },
            "values": {
              "$ref": "#/$defs/values"
            }
          }
        },
        "anchore": {
          "title": "The anchore Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "mattermostOperator": {
          "title": "The mattermostOperator Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "mattermost": {
          "title": "The mattermost Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "velero": {
          "title": "The velero Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "keycloak": {
          "title": "The keycloak Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "vault": {
          "title": "The vault Schema",
          "allOf": [
            {
              "$ref": "#/$defs/basePackage"
            }
          ]
        },
        "metricsServer": {
          "title": "The metricsServer Schema",
          "type": "object",
          "required": [
            "enabled",
            "git",
            "flux",
            "values"
          ],
          "properties": {
            "enabled": {
              "type": [
                "boolean",
                "string"
              ],
              "title": "The enabled Schema",
              "examples": [
                true,
                false,
                "auto"
              ]
            },
            "git": {
              "$ref": "#/$defs/git"
            },
            "flux": {
              "ref": "#/$defs/flux"
            },
            "values": {
              "$ref": "#/$defs/values"
            }
          }
        }
      }
    }
  },
  "$defs": {
    "registryCredential": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "registry",
        "username",
        "password"
      ],
      "additionalProperties": false
    },
    "basePackage": {
      "type": "object",
      "required": [
        "enabled",
        "git",
        "flux",
        "values",
        "postRenderers"
      ],
      "properties": {
        "enabled": {
          "$ref": "#/$defs/enabled"
        },
        "git": {
          "$ref": "#/$defs/git"
        },
        "flux": {
          "$ref": "#/$defs/flux"
        },
        "values": {
          "$ref": "#/$defs/values"
        },
        "postRenderers": {
          "$ref": "#/$defs/postRenderers"
        }
      }
    },
    "values": {
      "type": "object",
      "default": {},
      "title": "The values Schema",
      "required": [],
      "properties": {},
      "examples": [
        {}
      ]
    },
    "flux": {
      "type": "object",
      "properties": {
        "timeout": {
          "type": "string"
        },
        "interval": {
          "type": "string"
        },
        "test": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            }
          }
        },
        "install": {
          "type": "object",
          "properties": {
            "remediation": {
              "type": "object",
              "properties": {
                "retries": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "upgrade": {
          "type": "object",
          "properties": {
            "remediation": {
              "type": "object",
              "properties": {
                "retries": {
                  "type": "integer"
                },
                "remediateLastFailure": {
                  "type": "boolean"
                }
              }
            },
            "cleanupOnFail": {
              "type": "boolean"
            }
          }
        },
        "rollback": {
          "type": "object",
          "properties": {
            "timeout": {
              "type": "string"
            },
            "cleanupOnFail": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "git": {
      "type": "object",
      "default": {},
      "title": "The git Schema",
      "required": [
        "repo",
        "path"
      ],
      "oneOf": [
        {
          "required": [
            "tag"
          ],
          "not": {
            "required": [
              "branch"
            ]
          }
        },
        {
          "required": [
            "branch"
          ],
          "not": {
            "required": [
              "tag"
            ]
          }
        }
      ],
      "properties": {
        "repo": {
          "type": "string",
          "title": "The repo Schema",
          "examples": [
            "https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/loki.git"
          ]
        },
        "path": {
          "type": "string",
          "title": "The path Schema",
          "examples": [
            "./chart"
          ]
        },
        "tag": {
          "type": [
            "string",
            "null"
          ],
          "title": "The tag Schema",
          "nullable": false,
          "examples": [
            "4.8.0-bb.0"
          ]
        },
        "branch": {
          "type": [
            "string",
            "null"
          ],
          "title": "The branch Schema",
          "nullable": false,
          "examples": [
            "feature-branch"
          ]
        }
      },
      "examples": [
        {
          "repo": "https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/loki.git",
          "path": "./chart",
          "tag": "4.8.0-bb.0"
        }
      ]
    },
    "postRenderers": {
      "description": "PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition.",
      "type": "array",
      "items": {
        "description": "PostRenderer contains a Helm PostRenderer specification.",
        "type": "object",
        "properties": {
          "kustomize": {
            "description": "Kustomization to apply as PostRenderer.",
            "type": "object",
            "properties": {
              "images": {
                "description": "Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.",
                "type": "array",
                "items": {
                  "description": "Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "digest": {
                      "description": "Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is a tag-less image name.",
                      "type": "string"
                    },
                    "newName": {
                      "description": "NewName is the value used to replace the original name.",
                      "type": "string"
                    },
                    "newTag": {
                      "description": "NewTag is the value used to replace the original tag.",
                      "type": "string"
                    }
                  }
                }
              },
              "patches": {
                "description": "Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects based on kind, label and annotation selectors.",
                "type": "array",
                "items": {
                  "description": "Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should be applied to.",
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with an array of operation objects.",
                      "type": "string"
                    },
                    "target": {
                      "description": "Target points to the resources that the patch document should be applied to.",
                      "type": "object",
                      "properties": {
                        "annotationSelector": {
                          "description": "AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.",
                          "type": "string"
                        },
                        "group": {
                          "description": "Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                          "type": "string"
                        },
                        "labelSelector": {
                          "description": "LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name to match resources with.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace to select resources from.",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "patchesJson6902": {
                "description": "JSON 6902 patches, defined as inline YAML objects.",
                "type": "array",
                "items": {
                  "description": "JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.",
                  "type": "object",
                  "required": [
                    "patch",
                    "target"
                  ],
                  "properties": {
                    "patch": {
                      "description": "Patch contains the JSON6902 patch document with an array of operation objects.",
                      "type": "array",
                      "items": {
                        "description": "JSON6902 is a JSON6902 operation object. https://datatracker.ietf.org/doc/html/rfc6902#section-4",
                        "type": "object",
                        "required": [
                          "op",
                          "path"
                        ],
                        "properties": {
                          "from": {
                            "description": "From contains a JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.",
                            "type": "string"
                          },
                          "op": {
                            "description": "Op indicates the operation to perform. Its value MUST be one of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or \"test\". https://datatracker.ietf.org/doc/html/rfc6902#section-4",
                            "type": "string",
                            "enum": [
                              "test",
                              "remove",
                              "add",
                              "replace",
                              "move",
                              "copy"
                            ]
                          },
                          "path": {
                            "description": "Path contains the JSON-pointer value that references a location within the target document where the operation is performed. The meaning of the value depends on the value of Op.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.",
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      }
                    },
                    "target": {
                      "description": "Target points to the resources that the patch document should be applied to.",
                      "type": "object",
                      "properties": {
                        "annotationSelector": {
                          "description": "AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.",
                          "type": "string"
                        },
                        "group": {
                          "description": "Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                          "type": "string"
                        },
                        "labelSelector": {
                          "description": "LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name to match resources with.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace to select resources from.",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "patchesStrategicMerge": {
                "description": "Strategic merge patches, defined as inline YAML objects.",
                "type": "array",
                "items": {
                  "x-kubernetes-preserve-unknown-fields": true
                }
              }
            }
          }
        }
      }
    },
    "enabled": {
      "type": "boolean",
      "default": false,
      "title": "The enabled Schema",
      "examples": [
        false
      ]
    }
  }
}