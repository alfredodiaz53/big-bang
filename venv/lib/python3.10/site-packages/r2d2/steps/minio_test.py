class R2D2Step:
    step = "Minio Test"
    # this is what is shown in the CLI options

    def __init__(self, repo, repo1, console, config):
        self.repo = repo
        self.repo1 = repo1
        self.console = console
        self.config = config

    def run(self):
        self.console.info("Running Minio tests...")

        import minio
        import os
        import datetime
        import requests
        import subprocess
        import base64
        import json

        from minio import Minio
        from minio.error import S3Error
        
        current_datetime = datetime.datetime.now()
        api_url = 'minio-api.dogfood.bigbang.dev'
        server_url = 'https://minio.dogfood.bigbang.dev'
        file_path = '/tmp/miniotest.txt'
        local_file_path = f"/tmp/miniosuccess_{current_datetime.strftime('%Y-%m-%d_%H-%M-%S')}.txt"
        object_name = f"miniosuccess_{current_datetime.strftime('%Y-%m-%d_%H-%M-%S')}.txt"
        bucket_name = 'releasetest'

        ### SECRETS RETRIEVAL ###
        #Parse Secret
        command = "kubectl -n minio get secret minio-creds-secret -o json"
        output = subprocess.check_output(command, shell=True)

        # Parse the JSON output
        data = json.loads(output)

        # Extract the access key from the JSON data
        access_key_encoded = data["data"]["accesskey"]
        access_key = base64.b64decode(access_key_encoded).decode("utf-8")

        # Extract the secret key from the JSON data
        secret_key_encoded = data["data"]["secretkey"]
        secret_key = base64.b64decode(secret_key_encoded).decode("utf-8")

        # Print the access key
        print(f"Access key: {access_key}")
        print(f"Secret key: {secret_key}")


        ### URL CHECK ###
        try:
            # Send an HTTP GET request to the URL
            response = requests.get(server_url)

            # Check the response status code
            if response.status_code == 200:
                print(f"URL '{server_url}' is accessible")
            else:
                print(f"URL '{server_url}' is not accessible. Status code: {response.status_code}")
        except requests.exceptions.RequestException as err:
            print(f"Error accessing URL: {err}")

        ### ADD BUCKET, ADD FILE, UPLOAD FILE, DOWNLOAD FILE, REMOVE BUCKET AND FILE ####

        minio_client = Minio(api_url, access_key, secret_key, secure=True)

        minio_client.make_bucket(bucket_name)

        if minio_client.bucket_exists(bucket_name):
            print(f"Bucket '{bucket_name}' created successfully")
        else:
            print(f"Bucket '{bucket_name}' does not exist")

        try:
            if not os.path.isfile(file_path):
                open(file_path, 'w').close()

            
            minio_client.fput_object(bucket_name, object_name, file_path)
        
            print(f"File '{file_path}' uploaded successfully to bucket '{bucket_name}' as '{object_name}'")
        except Exception as err:
            print(f"Error uploading file: {err}")

        try:
            # Download the object from the bucket
            minio_client.fget_object(bucket_name, object_name, local_file_path)

            print(f"Object '{object_name}' downloaded successfully from bucket '{bucket_name}'")
        except Exception as err:
            print(f"Error downloading object: {err}")

        try:
            # List all objects in the bucket
            objects = minio_client.list_objects(bucket_name, recursive=True)

            # Delete each object in the bucket
            for obj in objects:
                minio_client.remove_object(bucket_name, obj.object_name)

            # Remove the bucket
            minio_client.remove_bucket(bucket_name)

            print(f"Bucket '{bucket_name}' and its objects removed successfully")
        except Exception as err:
            print(f"Error removing bucket: {err}")
