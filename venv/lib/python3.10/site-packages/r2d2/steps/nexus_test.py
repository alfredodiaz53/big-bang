import subprocess

class R2D2Step:
    step = "Nexus Test"
    
    def __init__(self, repo, repo1, console, config):
        self.repo = repo
        self.repo1 = repo1
        self.console = console
        self.config = config
    
    def run(self):
        self.console.info("Running Nexus tests...")

        # variable for image to pull and push during test
        image = 'alpine:3.18.2'

        # username is admin, password is the output of this command
        try:
            passCommand = ['kubectl', 'get', 'secret', '-n', 'nexus-repository-manager', 'nexus-repository-manager-secret', '-o', 'go-template={{index .data "admin.password" | base64decode}}']
            ps = subprocess.Popen(passCommand, stdout=subprocess.PIPE)

            # login to containers.dogfood.bigbang.dev with admin credentials
            loginCommand = ['docker', 'login', 'containers.dogfood.bigbang.dev', '--username', 'admin', '--password-stdin']
            subprocess.check_call(loginCommand, stdin=ps.stdout)
            ps.wait()
            
        except subprocess.CalledProcessError as err:
            print(f"Error Logging in to Docker: {err}")

        # pull alpine image locally, tag and push to repo
        try:
            subprocess.check_call(['docker', 'pull', '{}'.format(image)])
            subprocess.check_call(['docker' ,'tag', 'alpine:3.18.2', 'containers.dogfood.bigbang.dev/{}'.format(image)])
            subprocess.check_call(['docker' ,'push' ,'containers.dogfood.bigbang.dev/{}'.format(image)])
            print(f"Successfully pushed {image} to nexus repository.")
        except subprocess.CalledProcessError as err:
            print(f"Error pushing {image} to nexus repository: {err}")

        # remove local copy and pull from repository
        try:
            subprocess.check_call(['docker', 'rmi', 'containers.dogfood.bigbang.dev/{}'.format(image)])
            subprocess.check_call(['docker' ,'pull' ,'containers.dogfood.bigbang.dev/{}'.format(image)])
            print(f"Successfully pulled {image} from nexus repository.")
        except subprocess.CalledProcessError as err:
            print(f"Error pulling {image} from nexus repository: {err}")
            
        # logout (this removes stored password)
        subprocess.call(['docker' ,'logout'])