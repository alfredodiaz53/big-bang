import os
import datetime
# https://github.com/panodata/grafana-client
from grafana_client import GrafanaApi
from grafana_client.util import setup_logging
import logging
import requests
import subprocess

from r2d2.utils.common import *

class R2D2Step:
    step = "Loki Test"
    # this is what is shown in the CLI options

    def __init__(self, repo, repo1, console, config):
        self.repo = repo
        self.repo1 = repo1
        self.console = console
        self.config = config

    def run(self):
        self.console.info("Running Loki tests...")

        # This may help with troubleshooting the requests library
        # setup_logging(level=logging.DEBUG)
        grafana_url = format_url(self.config.get("grafana_url", "https://grafana.dogfood.bigbang.dev"))
        self.console.info(f"Testing Loki via {grafana_url}...")
        datasource_name = "Loki"
        
        ### SECRETS RETRIEVAL ###
        command = "kubectl -n kiali get secret grafana-auth -o json"
        data = to_json_dict(exec(command))
        password = b64decode(data["data"]["password"])

        self.console.log(f"Connecting to Grafana at {grafana_url}...")
        grafana = GrafanaApi.from_url(grafana_url, credential=("admin", password))

        # Find loki databsource
        datasources = grafana.datasource.list_datasources()
        loki = next(ds for ds in datasources if ds["name"] == datasource_name)
        if not loki:
            raise Exception(f'Could not find {datasource_name} datasource out of {list(ds["name"] for ds in datasources)}')

        # Query the datasource
        # https://grafana.bigbang.dev/api/ds/query
        # This sort of query is not supported natively by the grafana-client library.
        # Many Bothans died to bring us this information. 
        self.console.log(f"Found {datasource_name} datasource, getting logs...")
        refId = "A" # Can be anything
        payload = {
            "queries":[
                {
                    "expr":"{namespace=\"monitoring\", pod=~\".*\"} |~ \"\"",
                    "refId": refId,
                    "scenarioId":"csv_metric_values", # ???
                    "datasource":{
                        "type": "loki",
                        "uid":loki["uid"]
                    },
                    "queryType":"range",
                    "maxLines":1000,
                    "legendFormat":"",
                    "datasourceId":2,
                    "intervalMs":1000,
                    "maxDataPoints":1888
                }
            ],
            "from":"now-10m",
            "to":"now"
        }
        response = grafana.datasource.client.POST("/ds/query", json = payload)
        self.console.log("...log query successful")

        try:
            if response["results"][refId]["status"] != 200:
                raise Exception(f'Query status expected 200, instead received {response["results"][refId]["status"]}')
            schema = response["results"][refId]["frames"][0]["schema"]
            if not len(schema["meta"]["stats"]):
                raise Exception("No stats returned")
            if not next((stat for stat in schema["meta"]["stats"] if stat["value"] > 0), None):
                raise Exception("No stats had non-zero value")
            data = response["results"][refId]["frames"][0]["data"]
            if not len(data["values"][0]):
                raise Exception("No values returned")
            # Somewhat coupled to log format starting with timestamp but what can you do
            pattern = re.compile(r"\[\d{4}-\d{2}-\d{2}")
            # Ugh. I wrote this first as nested list comprehension and it was terribly unreadable, so this is broken out for readability.
            found = False
            for value in data["values"]:
                if len(value) and isinstance(value[0], str) and re.match(pattern, value[0]):
                    found = True
                    break
            if not found:
                raise Exception("No timestamped log messages found")
        except Exception as e:
            # Output dumped for troubleshooting; the response is way too long for simply printing out to console
            filename = os.path.join(os.path.expanduser("~"), "loki.json") 
            with open(filename, "w") as f:
                json.dump(response, f)
            raise Exception(f"Response dumped to {filename}") from e
        
        self.console.log("Loki tests completed successfully.")
