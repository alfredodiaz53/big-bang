import importlib.resources
import json
import os
import shutil
import sys
from pathlib import Path
from shutil import copy2

import inquirer
from pyfiglet import Figlet
from ruamel.yaml import YAML

import r2d2.steps
from .utils.common import override_nested_dict, to_json_str
from .utils.console import Console
from .utils.gitlab import BigBangRepo1
from .utils.repo import BigBangRepo

setup_questions = [
    inquirer.Password(
        "repo1_token",
        message="Enter your personal access token for repo1.dso.mil",
        validate=lambda _, x: len(x) > 0 and x.startswith("repo1"),
    ),
    inquirer.Text(
        "bb_path",
        message="Enter the path to your cloned Big Bang repo, e.g. ~/dev/bigbang",
        default="~/bigbang",
    ),
    # {
    #     "type": "list",
    #     "name": "release_type",
    #     "message": "What type of release?",
    #     "choices": [
    #         "major",
    #         "minor",
    #         "patch",
    #     ],
    #     "default": "minor",
    # },
]


def cli():
    console = Console()
    t = Figlet(font="slant")
    print(console.term.green_bold(t.renderText("R2-D2")))


    config_path = Path.home().joinpath(".r2d2/config.yaml")
    resources_path = importlib.resources.files(__package__)
    if not config_path.exists():
        template_config_path = Path.joinpath(resources_path, "templates/config.yaml")

        console.info("This is your first run. Let's get you set up.")
        os.makedirs(Path.home().joinpath(".r2d2"), exist_ok=True)

        config_from_yaml = YAML().load(template_config_path.open())
        setup = console.prompt(setup_questions)
        if "repo1_token" not in setup or "bb_path" not in setup:
            shutil.rmtree(Path.home().joinpath(".r2d2"))
            exit()
        config_from_yaml["repo1_token"] = setup["repo1_token"]
        config_from_yaml["bb_path"] = setup["bb_path"]
        with config_path.open("w") as f:
            YAML().dump(config_from_yaml, f)
    else:
        config_from_yaml = YAML().load(config_path.open())
        console.info(f"Using cached creds+config from {config_path}")
        if "repo1_token" not in config_from_yaml:
            console.error("Config is missing repo1_token, please re-run")
            shutil.rmtree(Path.home().joinpath(".r2d2"))
            exit(1)

    config = override_nested_dict(config_from_yaml, list(arg[2:] for arg in sys.argv if arg.startswith("--")))
    console.debug(f"Config JSON:\n{to_json_str(config)}")
    # Allow interactive answers to override
    if config["interactive"] is True:
        choices = []
        name_map = dict()

        # This depends on __all__ defined in r2d2/steps/__init__.py being correct, so if there's
        # something that's showing up / not showing up where it shouldn't, that's where you should look.
        for module_name in r2d2.steps.__all__:
            # This part may not be required but is easy so here we are
            module = importlib.import_module(f"r2d2.steps.{module_name}")
            step = getattr(module, "R2D2Step")
            choices.append(step.step)
            name_map[step.step] = module_name

        steps_checkboxes = [
            inquirer.Checkbox(
                "selections",
                message="What would you like to do?",
                choices=choices,
            ),
        ]

        answers = console.prompt(steps_checkboxes)
        answers["steps"] = []
        for selection in answers["selections"]:
            answers["steps"].append(name_map[selection])

        if not answers["steps"]:
            console.error("You must use spacebar to select/deselect the steps you want to run.")
            console.error("Then hit ENTER to run the selected steps.")
            exit(1)

        config = {
            **config,
            **answers,
        }
    else:
        # Non-interactive
        if not config["steps"]:
            console.error(f"No steps are defined in {config_path}")
            exit(1)
        console.info(f'Running steps defined in {config_path}: {config["steps"]}')

    repo1 = BigBangRepo1(
        token=config["repo1_token"],
        release_type=config["release_type"],
    )

    repo = BigBangRepo(bb_path=config["bb_path"])

    console.is_interactive = config["interactive"]
    console.log_level = config["log_level"]

    developer_mode = config.get("developer_mode", False)

    if developer_mode:
        console.log(":gear: Developer mode is enabled, running against previous release\n")

    # TODO: This stuff (and the tag stuff below) can probably be moved to prerun for the appropriate
    # step(s) instead of being here.
    console.spinner.start("Authenticating with Repo1")
    is_authenticated = repo1.authenticate()
    if is_authenticated is False:
        console.spinner.fail(console.term.red("Auth failed, invalid token"))
        exit(1)
    console.spinner.succeed(console.term.green("Authenticated"))

    if config.get("skip_gitlab", ""):
        console.log("Skipping gitlab tag and release branch steps. Hopefully you know what you're doing.")
    else:
        if console.log_level == "debug":
            console.spinner.start("Calculating last and next release tags")
            repo1.calculate_release_tags(developer_mode)
            console.spinner.succeed(
                console.term.green("Calculated last and next release tags")
            )
            console.log(":point_right: Last release branch: " + repo1.last_release_tag_x)
            console.log(
                ":point_right: Last release tag: "
                + json.dumps(repo1.last_release_tag.to_dict())
            )
            console.log(":point_right: Next release branch: " + repo1.next_release_tag_x)
            console.log(
                ":point_right: Next release tag: "
                + json.dumps(repo1.next_release_tag.to_dict())
            )
        else:
            console.spinner.start("Calculating last and next release tags")
            repo1.calculate_release_tags(developer_mode)
            console.spinner.succeed(
                console.term.green("Calculated last and next release tags")
            )

        if not "create_release_branch" in config["steps"]:
            # if we don't select to create a release branch, we still need to calculate it
            if not repo1.get_branch(f"release-{repo1.next_release_tag_x}"):
                console.error(
                    f"Release branch 'release-{repo1.next_release_tag_x}' not found."
                )
                console.error(
                    "You must create the release branch before running the release."
                )
                exit()
            else:
                repo1.set_release_branch(f"release-{repo1.next_release_tag_x}")

    # Note that the all steps prerun modifies config["steps"] so doing something
    # like loading all modules first before the prerun step and then reusing it
    # for the run step will not work.
    for step in config["steps"]:
        module = importlib.import_module(f"r2d2.steps.{step}")
        step = getattr(module, "R2D2Step")
        if hasattr(step, "prerun") and callable(getattr(step, "prerun")):
            instance = step(repo, repo1, console, config)
            instance.prerun()

    for step in config["steps"]:
        module = importlib.import_module(f"r2d2.steps.{step}")
        step = getattr(module, "R2D2Step")
        instance = step(repo, repo1, console, config)
        instance.run()

if __name__ == "__main__":
    cli()
